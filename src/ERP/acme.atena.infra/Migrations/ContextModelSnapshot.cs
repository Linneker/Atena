// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using acme.atena.infra.Config;

namespace acme.atena.infra.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("acme.atena.domain.DTO.Account.Despesa", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("DespesaFixa")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("Valor")
                        .HasPrecision(24, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.ToTable("Despesa");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.Divida", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("ClienteId")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("DataCompra")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataQueDeviaTerRecebido")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("EmpresaId")
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("EnumTipoDivida")
                        .HasColumnType("int");

                    b.Property<byte[]>("FornecedorId")
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte[]>("UsuarioId")
                        .HasColumnType("varbinary(16)");

                    b.Property<decimal>("Valor")
                        .HasPrecision(24, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("CompetenciaId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Divida");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.FluxoDeCaixa", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<decimal>("SaldoFinalCaixa")
                        .HasPrecision(24, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("SaldoInicial")
                        .HasPrecision(24, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("SaldoOperacional")
                        .HasPrecision(24, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.ToTable("FluxoDeCaixa");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.FluxoDeCaixaDespesa", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("DespesaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("FluxoDeCaixaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("DespesaId");

                    b.HasIndex("FluxoDeCaixaId");

                    b.ToTable("FluxoDeCaixaDespesa");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.FluxoDeCaixaReceita", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("FluxoDeCaixaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("ReceitaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("FluxoDeCaixaId");

                    b.HasIndex("ReceitaId");

                    b.ToTable("FluxoDeCaixaReceita");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.FormaPagamento", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Nome")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("FormaPagamento");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.Pagamento", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("ClienteId")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCredito")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("EmpresaId")
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("EnumTipoPagamento")
                        .HasColumnType("int");

                    b.Property<byte[]>("FornecedorId")
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("NumeroDaParcela")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<byte[]>("PagamentoVendaId")
                        .HasColumnType("varbinary(16)");

                    b.Property<bool>("Parcelado")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte[]>("UsuarioId")
                        .HasColumnType("varbinary(16)");

                    b.Property<decimal>("ValorPago")
                        .HasPrecision(24, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("CompetenciaId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("PagamentoVendaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Pagamento");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.PagamentoFormaPagamento", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("FormaPagamentoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("PagamentoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("FormaPagamentoId");

                    b.HasIndex("PagamentoId");

                    b.ToTable("PagamentoFormaPagamento");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.PagamentoVenda", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("DataCredito")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("datetime");

                    b.Property<int>("DiaVencimentoParcela")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("NumeroDeParcela")
                        .HasColumnType("int");

                    b.Property<bool>("Parcelado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("StatusPagamento")
                        .HasColumnType("int");

                    b.Property<byte[]>("VendaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.HasIndex("VendaId");

                    b.ToTable("PagamentoVenda");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.PagamentoVendaFormaPagamento", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("FormaPagamentoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("PagamentoVendaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("FormaPagamentoId");

                    b.HasIndex("PagamentoVendaId");

                    b.ToTable("PagamentoVendaFormaPagamento");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.Receita", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("ReceitaFixa")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("Valor")
                        .HasPrecision(24, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.ToTable("Receita");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Inventory.EntradaProdutoEstoque", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("EstoqueId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("ProdutoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.HasIndex("EstoqueId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("EntradaProdutoEstoque");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Inventory.Estoque", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("EmpresaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("EstoqueMaximo")
                        .HasColumnType("int");

                    b.Property<int>("EstoqueMinimo")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Estoque");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Inventory.EstoqueProduto", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("EstoqueId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("ProdutoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<long>("QuantidadeMaxima")
                        .HasColumnType("bigint");

                    b.Property<long>("QuantidadeMinima")
                        .HasColumnType("bigint");

                    b.Property<long>("QuantidadeProduto")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("EstoqueId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("EstoqueProduto");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Inventory.SaidaProdutoEstoque", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataSaida")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("NOW()");

                    b.Property<byte[]>("EstoqueId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("ProdutoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.HasIndex("EstoqueId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("SaidaProdutoEstoque");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Person.Cliente", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Celular")
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)");

                    b.Property<string>("CpfCnpj")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("InscricaoMunicipal")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nome")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("NomeFantasia")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CpfCnpj")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Person.Empresa", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Celular")
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)");

                    b.Property<string>("CpfCnpj")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<byte[]>("EmpresaMatrizId")
                        .HasColumnType("varbinary(16)");

                    b.Property<bool>("IsFilial")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nome")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("RazaoSocial")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CpfCnpj")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmpresaMatrizId");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Person.Fornecedor", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Celular")
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)");

                    b.Property<string>("CpfCnpj")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("InscricaoMunicipal")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nome")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("NomeFantasia")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CpfCnpj")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Fornecedor");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.Compra", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("DataCompra")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("FornecedorId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte[]>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<long>("ValorTotal")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Compra");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.CompraProduto", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompraId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsRecebido")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("ProdutoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("QuantidadeComprada")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("Valor")
                        .HasPrecision(24, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.HasIndex("CompraId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("CompraProduto");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.DevolucaoCompra", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompraProdutoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsParcial")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Motivo")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<byte[]>("ProdutoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.HasIndex("CompraProdutoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("DevolucaoCompra");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.DevolucaoVenda", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsParcial")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Motivo")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<byte[]>("ProdutoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte[]>("VendaProdutoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("VendaProdutoId");

                    b.ToTable("DevolucaoVenda");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.Price.TipoValorProduto", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("TipoValorProduto");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.Price.ValorProduto", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("ProdutoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte[]>("TipoValorProdutoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<decimal>("Valor")
                        .HasPrecision(24, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("TipoValorProdutoId");

                    b.ToTable("ValorProduto");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.Produto", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<long>("Codigo")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte[]>("TipoProdutoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("Validade")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("TipoProdutoId");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.TipoProduto", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TipoProduto");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.Venda", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("ClienteId")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataVenda")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("EmpresaId")
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte[]>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<decimal?>("ValorPago")
                        .HasPrecision(24, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ValorTotal")
                        .HasPrecision(24, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("CompetenciaId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Venda");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.VendaProduto", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("datetime");

                    b.Property<bool>("Enviado")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("ProdutoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("QuantidadeVedida")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("Valor")
                        .HasPrecision(24, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("VendaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("VendaId");

                    b.ToTable("VendaProduto");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Seguranca.AutorizacaoApi", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("AccessKey")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("AutorizacaoApi");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Seguranca.Permissao", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<int>("Nivel")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasMaxLength(110)
                        .IsUnicode(false)
                        .HasColumnType("varchar(110)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Permissao");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Seguranca.PermissaoUsuario", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Acesso")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("PermissaoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte[]>("TelaId")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Id");

                    b.HasIndex("PermissaoId");

                    b.HasIndex("TelaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("PermissaoUsuario");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Seguranca.Tela", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Class")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte[]>("TelaSistemaFilhaId")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte?>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("tinyint(255)");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Variant")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("TelaSistemaFilhaId");

                    b.ToTable("Tela");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Seguranca.Usuario", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Celular")
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)");

                    b.Property<string>("CpfCnpj")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Login")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Nome")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Senha")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("TermoDeAceite")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CpfCnpj")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Util.Competencia", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<int>("Mes")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Competencia");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Util.Endereco", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Bairro")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Cep")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Cidade")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Estado")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Pais")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Rua")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Util.EnderecoCliente", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("ClienteId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("EnderecoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EnderecoId");

                    b.ToTable("EnderecoCliente");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Util.EnderecoEmpresa", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("EmpresaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("EnderecoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EnderecoId");

                    b.ToTable("EnderecoEmpresa");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Util.EnderecoFornecedor", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("EnderecoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("FornecedorId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("FornecedorId");

                    b.ToTable("EnderecoFornecedor");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Util.EnderecoUsuario", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("EnderecoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte[]>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("EnderecoUsuario");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Util.Parametro", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("ExibirTela")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Nome")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Valor")
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)");

                    b.HasKey("Id");

                    b.ToTable("Parametro");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.Despesa", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("Despesas")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.Divida", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Seguranca.Usuario", "Usuario")
                        .WithMany("Dividas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("acme.atena.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("Dividas")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Person.Empresa", "Empresa")
                        .WithMany("Dividas")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("acme.atena.domain.DTO.Person.Fornecedor", "Fornecedor")
                        .WithMany("Dividas")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("acme.atena.domain.DTO.Person.Cliente", "Cliente")
                        .WithMany("Dividas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cliente");

                    b.Navigation("Competencia");

                    b.Navigation("Empresa");

                    b.Navigation("Fornecedor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.FluxoDeCaixa", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("FluxosDeCasas")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.FluxoDeCaixaDespesa", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Account.Despesa", "Despesa")
                        .WithMany("FluxoDeCaixasDespesas")
                        .HasForeignKey("DespesaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Account.FluxoDeCaixa", "FluxoDeCaixa")
                        .WithMany("FluxoDeCaixasDespesas")
                        .HasForeignKey("FluxoDeCaixaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Despesa");

                    b.Navigation("FluxoDeCaixa");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.FluxoDeCaixaReceita", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Account.FluxoDeCaixa", "FluxoDeCaixa")
                        .WithMany("FluxoDeCaixasReceitas")
                        .HasForeignKey("FluxoDeCaixaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Account.Receita", "Receita")
                        .WithMany("FluxoDeCaixasReceitas")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FluxoDeCaixa");

                    b.Navigation("Receita");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.Pagamento", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Seguranca.Usuario", "Usuario")
                        .WithMany("Pagamentos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("acme.atena.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("Pagamentos")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Person.Empresa", "Empresa")
                        .WithMany("Pagamentos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("acme.atena.domain.DTO.Person.Fornecedor", "Fornecedor")
                        .WithMany("Pagamentos")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("acme.atena.domain.DTO.Account.PagamentoVenda", "PagamentoVenda")
                        .WithMany("Pagamentos")
                        .HasForeignKey("PagamentoVendaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("acme.atena.domain.DTO.Person.Cliente", "Cliente")
                        .WithMany("Pagamentos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cliente");

                    b.Navigation("Competencia");

                    b.Navigation("Empresa");

                    b.Navigation("Fornecedor");

                    b.Navigation("PagamentoVenda");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.PagamentoFormaPagamento", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Account.FormaPagamento", "FormaPagamento")
                        .WithMany("PagamentoFormaPagamentos")
                        .HasForeignKey("FormaPagamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Account.Pagamento", "Pagamento")
                        .WithMany("PagamentosFormasPagamentos")
                        .HasForeignKey("PagamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FormaPagamento");

                    b.Navigation("Pagamento");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.PagamentoVenda", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("PagamentosVendas")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Product.Venda", "Venda")
                        .WithMany("PagamentosVendas")
                        .HasForeignKey("VendaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");

                    b.Navigation("Venda");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.PagamentoVendaFormaPagamento", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Account.FormaPagamento", "FormaPagamento")
                        .WithMany("PagamentoVendasFormasPagamentos")
                        .HasForeignKey("FormaPagamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Account.PagamentoVenda", "PagamentoVenda")
                        .WithMany("PagamentoVendasFormasPagamentos")
                        .HasForeignKey("PagamentoVendaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FormaPagamento");

                    b.Navigation("PagamentoVenda");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.Receita", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("Receitas")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Inventory.EntradaProdutoEstoque", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("EntradaProdutoEstoques")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Inventory.Estoque", "Estoque")
                        .WithMany("EntradaProdutoEstoques")
                        .HasForeignKey("EstoqueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Product.Produto", "Produto")
                        .WithMany("EntradaProdutoEstoques")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");

                    b.Navigation("Estoque");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Inventory.Estoque", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Person.Empresa", "Empresa")
                        .WithMany("Estoque")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Inventory.EstoqueProduto", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Inventory.Estoque", "Estoque")
                        .WithMany("EstoqueProdutos")
                        .HasForeignKey("EstoqueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Product.Produto", "Produto")
                        .WithMany("EstoqueProdutos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estoque");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Inventory.SaidaProdutoEstoque", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("SaidaProdutoEstoques")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Inventory.Estoque", "Estoque")
                        .WithMany("SaidaProdutoEstoques")
                        .HasForeignKey("EstoqueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Product.Produto", "Produto")
                        .WithMany("SaidaProdutoEstoques")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");

                    b.Navigation("Estoque");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Person.Empresa", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Person.Empresa", "EmpresaMatriz")
                        .WithMany()
                        .HasForeignKey("EmpresaMatrizId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("EmpresaMatriz");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.Compra", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("Compras")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Person.Fornecedor", "Fornecedor")
                        .WithMany("Compras")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Seguranca.Usuario", "Usuario")
                        .WithMany("Compras")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");

                    b.Navigation("Fornecedor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.CompraProduto", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("ComprasProdutos")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Product.Compra", "Compra")
                        .WithMany("ComprasProdutos")
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Product.Produto", "Produto")
                        .WithMany("ComprasProdutos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");

                    b.Navigation("Compra");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.DevolucaoCompra", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("DevolucaoCompras")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Product.CompraProduto", "CompraProduto")
                        .WithMany("DevolucaoCompras")
                        .HasForeignKey("CompraProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Product.Produto", "Produto")
                        .WithMany("DevolucaoCompras")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");

                    b.Navigation("CompraProduto");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.DevolucaoVenda", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("DevolucoesVenda")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Product.Produto", "Produto")
                        .WithMany("DevolucoesVenda")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Product.VendaProduto", "VendaProduto")
                        .WithMany("DevolucoesVenda")
                        .HasForeignKey("VendaProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");

                    b.Navigation("Produto");

                    b.Navigation("VendaProduto");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.Price.ValorProduto", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Product.Produto", "Produto")
                        .WithMany("ValorProdutos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Product.Price.TipoValorProduto", "TipoValorProduto")
                        .WithMany("ValorProdutos")
                        .HasForeignKey("TipoValorProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("TipoValorProduto");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.Produto", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Product.TipoProduto", "TipoProduto")
                        .WithMany("Produtos")
                        .HasForeignKey("TipoProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TipoProduto");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.Venda", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Person.Cliente", "Cliente")
                        .WithMany("Vendas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("acme.atena.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("Vendas")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Person.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("acme.atena.domain.DTO.Seguranca.Usuario", "Usuario")
                        .WithMany("Vendas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Competencia");

                    b.Navigation("Empresa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.VendaProduto", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("VendasProdutos")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Product.Produto", "Produto")
                        .WithMany("VendasProdutos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Product.Venda", "Venda")
                        .WithMany("VendasProdutos")
                        .HasForeignKey("VendaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");

                    b.Navigation("Produto");

                    b.Navigation("Venda");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Seguranca.PermissaoUsuario", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Seguranca.Permissao", "Permissao")
                        .WithMany("PermissaoUsuarios")
                        .HasForeignKey("PermissaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Seguranca.Tela", "Tela")
                        .WithMany("PermissaoUsuarios")
                        .HasForeignKey("TelaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("acme.atena.domain.DTO.Seguranca.Usuario", "Usuario")
                        .WithMany("PermissaoUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permissao");

                    b.Navigation("Tela");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Seguranca.Tela", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Seguranca.Tela", "TelaSistemaFilha")
                        .WithMany("TelasSistemasFilhas")
                        .HasForeignKey("TelaSistemaFilhaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TelaSistemaFilha");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Util.EnderecoCliente", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Person.Cliente", "Cliente")
                        .WithMany("EnderecoClientes")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Util.Endereco", "Endereco")
                        .WithMany("EnderecoClientes")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Util.EnderecoEmpresa", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Person.Empresa", "Empresa")
                        .WithMany("EnderecoEmpresas")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Util.Endereco", "Endereco")
                        .WithMany("EnderecoEmpresas")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Util.EnderecoFornecedor", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Util.Endereco", "Endereco")
                        .WithMany("EnderecoFornecedores")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Person.Fornecedor", "Fornecedor")
                        .WithMany("EnderecoFornecedores")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Endereco");

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Util.EnderecoUsuario", b =>
                {
                    b.HasOne("acme.atena.domain.DTO.Util.Endereco", "Endereco")
                        .WithMany("EnderecoUsuarios")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.atena.domain.DTO.Seguranca.Usuario", "Usuario")
                        .WithMany("EnderecoUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Endereco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.Despesa", b =>
                {
                    b.Navigation("FluxoDeCaixasDespesas");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.FluxoDeCaixa", b =>
                {
                    b.Navigation("FluxoDeCaixasDespesas");

                    b.Navigation("FluxoDeCaixasReceitas");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.FormaPagamento", b =>
                {
                    b.Navigation("PagamentoFormaPagamentos");

                    b.Navigation("PagamentoVendasFormasPagamentos");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.Pagamento", b =>
                {
                    b.Navigation("PagamentosFormasPagamentos");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.PagamentoVenda", b =>
                {
                    b.Navigation("Pagamentos");

                    b.Navigation("PagamentoVendasFormasPagamentos");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Account.Receita", b =>
                {
                    b.Navigation("FluxoDeCaixasReceitas");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Inventory.Estoque", b =>
                {
                    b.Navigation("EntradaProdutoEstoques");

                    b.Navigation("EstoqueProdutos");

                    b.Navigation("SaidaProdutoEstoques");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Person.Cliente", b =>
                {
                    b.Navigation("Dividas");

                    b.Navigation("EnderecoClientes");

                    b.Navigation("Pagamentos");

                    b.Navigation("Vendas");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Person.Empresa", b =>
                {
                    b.Navigation("Dividas");

                    b.Navigation("EnderecoEmpresas");

                    b.Navigation("Estoque");

                    b.Navigation("Pagamentos");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Person.Fornecedor", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("Dividas");

                    b.Navigation("EnderecoFornecedores");

                    b.Navigation("Pagamentos");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.Compra", b =>
                {
                    b.Navigation("ComprasProdutos");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.CompraProduto", b =>
                {
                    b.Navigation("DevolucaoCompras");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.Price.TipoValorProduto", b =>
                {
                    b.Navigation("ValorProdutos");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.Produto", b =>
                {
                    b.Navigation("ComprasProdutos");

                    b.Navigation("DevolucaoCompras");

                    b.Navigation("DevolucoesVenda");

                    b.Navigation("EntradaProdutoEstoques");

                    b.Navigation("EstoqueProdutos");

                    b.Navigation("SaidaProdutoEstoques");

                    b.Navigation("ValorProdutos");

                    b.Navigation("VendasProdutos");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.TipoProduto", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.Venda", b =>
                {
                    b.Navigation("PagamentosVendas");

                    b.Navigation("VendasProdutos");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Product.VendaProduto", b =>
                {
                    b.Navigation("DevolucoesVenda");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Seguranca.Permissao", b =>
                {
                    b.Navigation("PermissaoUsuarios");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Seguranca.Tela", b =>
                {
                    b.Navigation("PermissaoUsuarios");

                    b.Navigation("TelasSistemasFilhas");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Seguranca.Usuario", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("Dividas");

                    b.Navigation("EnderecoUsuarios");

                    b.Navigation("Pagamentos");

                    b.Navigation("PermissaoUsuarios");

                    b.Navigation("Vendas");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Util.Competencia", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("ComprasProdutos");

                    b.Navigation("Despesas");

                    b.Navigation("DevolucaoCompras");

                    b.Navigation("DevolucoesVenda");

                    b.Navigation("Dividas");

                    b.Navigation("EntradaProdutoEstoques");

                    b.Navigation("FluxosDeCasas");

                    b.Navigation("Pagamentos");

                    b.Navigation("PagamentosVendas");

                    b.Navigation("Receitas");

                    b.Navigation("SaidaProdutoEstoques");

                    b.Navigation("Vendas");

                    b.Navigation("VendasProdutos");
                });

            modelBuilder.Entity("acme.atena.domain.DTO.Util.Endereco", b =>
                {
                    b.Navigation("EnderecoClientes");

                    b.Navigation("EnderecoEmpresas");

                    b.Navigation("EnderecoFornecedores");

                    b.Navigation("EnderecoUsuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
