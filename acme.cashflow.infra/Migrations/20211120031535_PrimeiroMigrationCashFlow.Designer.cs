// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using acme.cashflow.infra.Config;

namespace acme.cashflow.infra.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20211120031535_PrimeiroMigrationCashFlow")]
    partial class PrimeiroMigrationCashFlow
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.Entity("acme.cashflow.domain.DTO.Account.Despesa", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("DespesaFixa")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("Valor")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.ToTable("Despesa");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Account.Divida", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("DataCompra")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataQueDeviaTerRecebido")
                        .HasColumnType("datetime");

                    b.Property<int>("EnumTipoDivida")
                        .HasColumnType("int");

                    b.Property<byte[]>("FornecedorId")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("PessoaId")
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte[]>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<decimal>("Valor")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("PessoaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Divida");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Account.FluxoDeCaixa", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<decimal>("SaldoFinalCaixa")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("SaldoInicial")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("SaldoOperacional")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.ToTable("FluxoDeCaixa");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Account.FluxoDeCaixaDespesa", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("DespesaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("FluxoDeCaixaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("DespesaId");

                    b.HasIndex("FluxoDeCaixaId");

                    b.ToTable("FluxoDeCaixaDespesa");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Account.FluxoDeCaixaReceita", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("FluxoDeCaixaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("ReceitaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("FluxoDeCaixaId");

                    b.HasIndex("ReceitaId");

                    b.ToTable("FluxoDeCaixaReceita");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Account.Pagamento", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCredito")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("datetime");

                    b.Property<int>("EnumFormaPagamento")
                        .HasColumnType("int");

                    b.Property<int>("EnumTipoPagamento")
                        .HasColumnType("int");

                    b.Property<byte[]>("FornecedorId")
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("NumeroDeParcela")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<bool>("Parcelado")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("PessoaId")
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte[]>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<decimal>("ValorPago")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("PessoaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Pagamento");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Account.Receita", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("ReceitaFixa")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("Valor")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.ToTable("Receita");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Person.Fornecedor", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Celular")
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)");

                    b.Property<string>("CpfCnpj")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("InscricaoMunicipal")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nome")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("NomeFantasia")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CpfCnpj")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Fornecedor");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Person.Pessoa", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Celular")
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)");

                    b.Property<string>("CpfCnpj")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Nome")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CpfCnpj")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Pessoa");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Product.Compra", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("DataCompra")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("FornecedorId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte[]>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<long>("ValorTotal")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Compra");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Product.CompraProduto", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompraId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("ProdutoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("QuantidadeComprada")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("Valor")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CompraId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("CompraProduto");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Product.Produto", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<long>("Codigo")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Nome")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("Valor")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Product.Venda", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CompetenciaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataVenda")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("PessoaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte[]>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<decimal>("ValorTotal")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.HasIndex("PessoaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Venda");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Product.VendaProduto", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("ProdutoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("QuantidadeVedida")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("Valor")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("VendaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.ToTable("VendaProduto");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Seguranca.AutorizacaoApi", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("AccessKey")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("AutorizacaoApi");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Seguranca.Permissao", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<int>("Nivel")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasMaxLength(110)
                        .IsUnicode(false)
                        .HasColumnType("varchar(110)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Permissao");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Seguranca.PermissaoUsuario", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<bool>("Add")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<bool>("Delete")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("PermissaoId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<bool>("Read")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("Update")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("PermissaoUsuario");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Seguranca.Usuario", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Login")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<byte[]>("PessoaId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Senha")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("TermoDeAceite")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("PessoaId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Util.Competencia", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<int>("Mes")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Competencia");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Util.Parametro", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("ExibirTela")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Nome")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Valor")
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)");

                    b.HasKey("Id");

                    b.ToTable("Parametro");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Account.Despesa", b =>
                {
                    b.HasOne("acme.cashflow.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("Despesas")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Account.Divida", b =>
                {
                    b.HasOne("acme.cashflow.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("Dividas")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.cashflow.domain.DTO.Person.Fornecedor", "Fornecedor")
                        .WithMany("Dividas")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("acme.cashflow.domain.DTO.Person.Pessoa", "Pessoa")
                        .WithMany("Dividas")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("acme.cashflow.domain.DTO.Seguranca.Usuario", "Usuario")
                        .WithMany("Dividas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");

                    b.Navigation("Fornecedor");

                    b.Navigation("Pessoa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Account.FluxoDeCaixa", b =>
                {
                    b.HasOne("acme.cashflow.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("FluxosDeCasas")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Account.FluxoDeCaixaDespesa", b =>
                {
                    b.HasOne("acme.cashflow.domain.DTO.Account.Despesa", "Despesa")
                        .WithMany("FluxoDeCaixasDespesas")
                        .HasForeignKey("DespesaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.cashflow.domain.DTO.Account.FluxoDeCaixa", "FluxoDeCaixa")
                        .WithMany("FluxoDeCaixasDespesas")
                        .HasForeignKey("FluxoDeCaixaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Despesa");

                    b.Navigation("FluxoDeCaixa");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Account.FluxoDeCaixaReceita", b =>
                {
                    b.HasOne("acme.cashflow.domain.DTO.Account.FluxoDeCaixa", "FluxoDeCaixa")
                        .WithMany("FluxoDeCaixasReceitas")
                        .HasForeignKey("FluxoDeCaixaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.cashflow.domain.DTO.Account.Receita", "Receita")
                        .WithMany("FluxoDeCaixasReceitas")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FluxoDeCaixa");

                    b.Navigation("Receita");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Account.Pagamento", b =>
                {
                    b.HasOne("acme.cashflow.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("Pagamentos")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.cashflow.domain.DTO.Person.Fornecedor", "Fornecedor")
                        .WithMany("Pagamentos")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("acme.cashflow.domain.DTO.Person.Pessoa", "Pessoa")
                        .WithMany("Pagamentos")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("acme.cashflow.domain.DTO.Seguranca.Usuario", "Usuario")
                        .WithMany("Pagamentos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");

                    b.Navigation("Fornecedor");

                    b.Navigation("Pessoa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Account.Receita", b =>
                {
                    b.HasOne("acme.cashflow.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("Receitas")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Product.Compra", b =>
                {
                    b.HasOne("acme.cashflow.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("Compras")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.cashflow.domain.DTO.Person.Fornecedor", "Fornecedor")
                        .WithMany("Compras")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.cashflow.domain.DTO.Seguranca.Usuario", "Usuario")
                        .WithMany("Compras")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");

                    b.Navigation("Fornecedor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Product.CompraProduto", b =>
                {
                    b.HasOne("acme.cashflow.domain.DTO.Product.Compra", "Compra")
                        .WithMany("ComprasProdutos")
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.cashflow.domain.DTO.Product.Produto", "Produto")
                        .WithMany("ComprasProdutos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Compra");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Product.Venda", b =>
                {
                    b.HasOne("acme.cashflow.domain.DTO.Util.Competencia", "Competencia")
                        .WithMany("Vendas")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.cashflow.domain.DTO.Person.Pessoa", "Pessoa")
                        .WithMany("Vendas")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.cashflow.domain.DTO.Seguranca.Usuario", "Usuario")
                        .WithMany("Vendas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competencia");

                    b.Navigation("Pessoa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Product.VendaProduto", b =>
                {
                    b.HasOne("acme.cashflow.domain.DTO.Product.Produto", "Produto")
                        .WithMany("VendasProdutos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.cashflow.domain.DTO.Product.Venda", "Venda")
                        .WithMany("VendasProdutos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("Venda");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Seguranca.PermissaoUsuario", b =>
                {
                    b.HasOne("acme.cashflow.domain.DTO.Seguranca.Permissao", "Permissao")
                        .WithMany("PermissaoUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("acme.cashflow.domain.DTO.Seguranca.Usuario", "Usuario")
                        .WithMany("PermissaoUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permissao");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Seguranca.Usuario", b =>
                {
                    b.HasOne("acme.cashflow.domain.DTO.Person.Pessoa", "Pessoa")
                        .WithMany("Usuarios")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Account.Despesa", b =>
                {
                    b.Navigation("FluxoDeCaixasDespesas");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Account.FluxoDeCaixa", b =>
                {
                    b.Navigation("FluxoDeCaixasDespesas");

                    b.Navigation("FluxoDeCaixasReceitas");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Account.Receita", b =>
                {
                    b.Navigation("FluxoDeCaixasReceitas");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Person.Fornecedor", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("Dividas");

                    b.Navigation("Pagamentos");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Person.Pessoa", b =>
                {
                    b.Navigation("Dividas");

                    b.Navigation("Pagamentos");

                    b.Navigation("Usuarios");

                    b.Navigation("Vendas");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Product.Compra", b =>
                {
                    b.Navigation("ComprasProdutos");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Product.Produto", b =>
                {
                    b.Navigation("ComprasProdutos");

                    b.Navigation("VendasProdutos");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Product.Venda", b =>
                {
                    b.Navigation("VendasProdutos");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Seguranca.Permissao", b =>
                {
                    b.Navigation("PermissaoUsuarios");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Seguranca.Usuario", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("Dividas");

                    b.Navigation("Pagamentos");

                    b.Navigation("PermissaoUsuarios");

                    b.Navigation("Vendas");
                });

            modelBuilder.Entity("acme.cashflow.domain.DTO.Util.Competencia", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("Despesas");

                    b.Navigation("Dividas");

                    b.Navigation("FluxosDeCasas");

                    b.Navigation("Pagamentos");

                    b.Navigation("Receitas");

                    b.Navigation("Vendas");
                });
#pragma warning restore 612, 618
        }
    }
}
